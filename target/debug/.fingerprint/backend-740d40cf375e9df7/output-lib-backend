{"$message_type":"diagnostic","message":"unused imports: `Error`, `format`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":96,"byte_end":101,"line_start":3,"line_end":3,"column_start":16,"column_end":21,"is_primary":true,"text":[{"text":"use std::fmt::{Error, format};","highlight_start":16,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":103,"byte_end":109,"line_start":3,"line_end":3,"column_start":23,"column_end":29,"is_primary":true,"text":[{"text":"use std::fmt::{Error, format};","highlight_start":23,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":81,"byte_end":112,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::fmt::{Error, format};","highlight_start":1,"highlight_end":31},{"text":"use std::fs::{File, OpenOptions};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Error`, `format`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:3:16\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fmt::{Error, format};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `File`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":126,"byte_end":130,"line_start":4,"line_end":4,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"use std::fs::{File, OpenOptions};","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":126,"byte_end":132,"line_start":4,"line_end":4,"column_start":15,"column_end":21,"is_primary":true,"text":[{"text":"use std::fs::{File, OpenOptions};","highlight_start":15,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `File`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:4:15\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fs::{File, OpenOptions};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Output`, `Stdio`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":207,"byte_end":213,"line_start":7,"line_end":7,"column_start":29,"column_end":35,"is_primary":true,"text":[{"text":"use std::process::{Command, Output, Stdio};","highlight_start":29,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":215,"byte_end":220,"line_start":7,"line_end":7,"column_start":37,"column_end":42,"is_primary":true,"text":[{"text":"use std::process::{Command, Output, Stdio};","highlight_start":37,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":205,"byte_end":220,"line_start":7,"line_end":7,"column_start":27,"column_end":42,"is_primary":true,"text":[{"text":"use std::process::{Command, Output, Stdio};","highlight_start":27,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Output`, `Stdio`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:7:29\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::process::{Command, Output, Stdio};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `anyhow::Result`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":227,"byte_end":241,"line_start":8,"line_end":8,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use anyhow::Result;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":223,"byte_end":243,"line_start":8,"line_end":9,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use anyhow::Result;","highlight_start":1,"highlight_end":20},{"text":"use middle::ir::IRValue::Str;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `anyhow::Result`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse anyhow::Result;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `middle::ir::IRValue::Str`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":247,"byte_end":271,"line_start":9,"line_end":9,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"use middle::ir::IRValue::Str;","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":243,"byte_end":273,"line_start":9,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use middle::ir::IRValue::Str;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `middle::ir::IRValue::Str`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse middle::ir::IRValue::Str;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reg_result`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":11933,"byte_end":11943,"line_start":239,"line_end":239,"column_start":25,"column_end":35,"is_primary":true,"text":[{"text":"                    let reg_result = get_register(*result);","highlight_start":25,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":11933,"byte_end":11943,"line_start":239,"line_end":239,"column_start":25,"column_end":35,"is_primary":true,"text":[{"text":"                    let reg_result = get_register(*result);","highlight_start":25,"highlight_end":35}],"label":null,"suggested_replacement":"_reg_result","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reg_result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:239:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m239\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let reg_result = get_register(*result);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reg_result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reg_result`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":12330,"byte_end":12340,"line_start":244,"line_end":244,"column_start":25,"column_end":35,"is_primary":true,"text":[{"text":"                    let reg_result = get_register(*result);","highlight_start":25,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":12330,"byte_end":12340,"line_start":244,"line_end":244,"column_start":25,"column_end":35,"is_primary":true,"text":[{"text":"                    let reg_result = get_register(*result);","highlight_start":25,"highlight_end":35}],"label":null,"suggested_replacement":"_reg_result","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reg_result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:244:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let reg_result = get_register(*result);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reg_result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reg_result`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":12726,"byte_end":12736,"line_start":249,"line_end":249,"column_start":25,"column_end":35,"is_primary":true,"text":[{"text":"                    let reg_result = get_register(*result);","highlight_start":25,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":12726,"byte_end":12736,"line_start":249,"line_end":249,"column_start":25,"column_end":35,"is_primary":true,"text":[{"text":"                    let reg_result = get_register(*result);","highlight_start":25,"highlight_end":35}],"label":null,"suggested_replacement":"_reg_result","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reg_result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:249:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let reg_result = get_register(*result);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reg_result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reg_cond`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":14848,"byte_end":14856,"line_start":289,"line_end":289,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":14848,"byte_end":14856,"line_start":289,"line_end":289,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":"_reg_cond","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reg_cond`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:289:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m289\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let reg_cond = get_register(*cond);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reg_cond`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reg_cond`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":15275,"byte_end":15283,"line_start":297,"line_end":297,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":15275,"byte_end":15283,"line_start":297,"line_end":297,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":"_reg_cond","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reg_cond`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:297:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m297\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let reg_cond = get_register(*cond);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reg_cond`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reg_cond`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":15707,"byte_end":15715,"line_start":305,"line_end":305,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":15707,"byte_end":15715,"line_start":305,"line_end":305,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":"_reg_cond","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reg_cond`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:305:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let reg_cond = get_register(*cond);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reg_cond`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reg_cond`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":16130,"byte_end":16138,"line_start":313,"line_end":313,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":16130,"byte_end":16138,"line_start":313,"line_end":313,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":"_reg_cond","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reg_cond`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:313:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m313\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let reg_cond = get_register(*cond);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reg_cond`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reg_cond`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":16559,"byte_end":16567,"line_start":321,"line_end":321,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":16559,"byte_end":16567,"line_start":321,"line_end":321,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":"_reg_cond","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reg_cond`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:321:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m321\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let reg_cond = get_register(*cond);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reg_cond`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reg_cond`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":16979,"byte_end":16987,"line_start":329,"line_end":329,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":16979,"byte_end":16987,"line_start":329,"line_end":329,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":"_reg_cond","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reg_cond`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:329:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let reg_cond = get_register(*cond);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reg_cond`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reg_cond`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":17403,"byte_end":17411,"line_start":337,"line_end":337,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":17403,"byte_end":17411,"line_start":337,"line_end":337,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":"_reg_cond","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reg_cond`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:337:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let reg_cond = get_register(*cond);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reg_cond`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reg_cond`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":17826,"byte_end":17834,"line_start":344,"line_end":344,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":17826,"byte_end":17834,"line_start":344,"line_end":344,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":"_reg_cond","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reg_cond`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:344:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m344\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let reg_cond = get_register(*cond);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reg_cond`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `reg_cond`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":18246,"byte_end":18254,"line_start":352,"line_end":352,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":18246,"byte_end":18254,"line_start":352,"line_end":352,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let reg_cond = get_register(*cond);","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":"_reg_cond","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `reg_cond`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:352:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m352\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let reg_cond = get_register(*cond);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_reg_cond`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `label_manager` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"backend/src/x86_assembler_generator.rs","byte_start":18873,"byte_end":18886,"line_start":372,"line_end":372,"column_start":4,"column_end":17,"is_primary":true,"text":[{"text":"fn label_manager() -> i32 {","highlight_start":4,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `label_manager` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbackend/src/x86_assembler_generator.rs:372:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m372\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn label_manager() -> i32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"18 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 18 warnings emitted\u001b[0m\n\n"}
